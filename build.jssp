'use strict';

require('@k2oss/k2-broker-core');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

metadata = {
    "systemName": "JSONPlaceholder",
    "displayName": "JSONPlaceholder Broker",
    "description": "Sample broker for JSONPlaceholder",
    "configuration": {
        "ServiceURL": {
            displayName: "JSONPlaceholder Service URL",
            type: "string",
            value: "https://jsonplaceholder.typicode.com/"
        }
    }
};
ondescribe = function (_a) {
    _a.configuration;
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_b) {
            postSchema({
                objects: {
                    "posts": {
                        displayName: "Posts",
                        description: "Manages Posts",
                        properties: {
                            "id": {
                                displayName: "ID",
                                type: "number"
                            },
                            "userId": {
                                displayName: "User ID",
                                type: "number"
                            },
                            "title": {
                                displayName: "Title",
                                type: "string"
                            },
                            "body": {
                                displayName: "Body",
                                type: "string"
                            }
                        },
                        methods: {
                            "getList": {
                                displayName: "Get Posts List",
                                type: "list",
                                outputs: ["id", "userId", "title", "body"]
                            },
                            "getById": {
                                displayName: "Get Post By ID",
                                type: "read",
                                inputs: ["id"],
                                requiredInputs: ["id"],
                                outputs: ["id", "userId", "title", "body"]
                            },
                            "getByUserId": {
                                displayName: "Get Posts By User ID",
                                type: "list",
                                inputs: ["userId"],
                                requiredInputs: ["userId"],
                                outputs: ["id", "userId", "title", "body"]
                            },
                            "create": {
                                displayName: "Create Post",
                                type: "create",
                                inputs: ["userId", "title", "body"],
                                outputs: ["id", "userId", "title", "body"]
                            },
                            "update": {
                                displayName: "Update Post",
                                type: "update",
                                inputs: ["id", "userId", "title", "body"],
                                requiredInputs: ["id"],
                                outputs: ["id", "userId", "title", "body"]
                            },
                            "delete": {
                                displayName: "Delete Post",
                                type: "delete",
                                inputs: ["id"],
                                requiredInputs: ["id"]
                            }
                        }
                    },
                    "comments": {
                        displayName: "Comments",
                        description: "Manages Comments",
                        properties: {
                            "id": {
                                displayName: "ID",
                                type: "number"
                            },
                            "postId": {
                                displayName: "Post ID",
                                type: "number"
                            },
                            "name": {
                                displayName: "Name",
                                type: "string"
                            },
                            "email": {
                                displayName: "Email",
                                type: "string"
                            },
                            "body": {
                                displayName: "Body",
                                type: "string"
                            }
                        },
                        methods: {
                            "getList": {
                                displayName: "Get Comments List",
                                type: "list",
                                outputs: ["id", "postId", "name", "email", "body"]
                            },
                            "getById": {
                                displayName: "Get Comment By ID",
                                type: "read",
                                inputs: ["id"],
                                requiredInputs: ["id"],
                                outputs: ["id", "postId", "name", "email", "body"]
                            },
                            "getByPostId": {
                                displayName: "Get Comments By Post ID",
                                type: "list",
                                inputs: ["postId"],
                                requiredInputs: ["postId"],
                                outputs: ["id", "postId", "name", "email", "body"]
                            }
                        }
                    },
                    "todos": {
                        displayName: "To Do",
                        description: "Manages To Dos",
                        properties: {
                            "id": {
                                displayName: "ID",
                                type: "number"
                            },
                            "userId": {
                                displayName: "User ID",
                                type: "number"
                            },
                            "title": {
                                displayName: "Title",
                                type: "string"
                            },
                            "completed": {
                                displayName: "Completed",
                                type: "boolean"
                            }
                        },
                        methods: {
                            "getList": {
                                displayName: "Get To Dos List",
                                type: "list",
                                outputs: ["id", "userId", "title", "completed"]
                            },
                            "getById": {
                                displayName: "Get To Do By ID",
                                type: "read",
                                inputs: ["id"],
                                requiredInputs: ["id"],
                                outputs: ["id", "userId", "title", "completed"]
                            }
                        }
                    },
                    "users": {
                        displayName: "Users",
                        description: "Manages Users",
                        properties: {
                            "id": {
                                displayName: "ID",
                                type: "number"
                            },
                            "name": {
                                displayName: "Name",
                                type: "string"
                            },
                            "username": {
                                displayName: "User Name",
                                type: "string"
                            },
                            "email": {
                                displayName: "Email",
                                type: "string"
                            },
                            "addressStreet": {
                                displayName: "Address.Street",
                                type: "string"
                            },
                            "addressSuite": {
                                displayName: "Address.Suite",
                                type: "string"
                            },
                            "addressCity": {
                                displayName: "Address.City",
                                type: "string"
                            },
                            "addressGeoLat": {
                                displayName: "Address.Geo.Latitude",
                                type: "string"
                            },
                            "addressGeoLng": {
                                displayName: "Address.Get.Longitude",
                                type: "string"
                            },
                            "phone": {
                                displayName: "Phone",
                                type: "string"
                            },
                            "website": {
                                displayName: "Website",
                                type: "string"
                            },
                            "companyName": {
                                displayName: "Company.Name",
                                type: "string"
                            },
                            "companyCatchPhrase": {
                                displayName: "Company.CatchPhrase",
                                type: "string"
                            },
                            "companyBs": {
                                displayName: "Company.BS",
                                type: "string"
                            }
                        },
                        methods: {
                            "getList": {
                                displayName: "Get Users List",
                                type: "list",
                                outputs: ["id",
                                    "name",
                                    "username",
                                    "email",
                                    "addressStreet",
                                    "addressSuite",
                                    "addressCity",
                                    "addressGeoLat",
                                    "addressGeoLng",
                                    "phone",
                                    "website",
                                    "companyName",
                                    "companyCatchPhrase",
                                    "companyBs"]
                            },
                            "getById": {
                                displayName: "Get Users By ID",
                                type: "read",
                                inputs: ["id"],
                                requiredInputs: ["id"],
                                outputs: ["id",
                                    "name",
                                    "username",
                                    "email",
                                    "addressStreet",
                                    "addressSuite",
                                    "addressCity",
                                    "addressGeoLat",
                                    "addressGeoLng",
                                    "phone",
                                    "website",
                                    "companyName",
                                    "companyCatchPhrase",
                                    "companyBs"]
                            }
                        }
                    }
                }
            });
            return [2 /*return*/];
        });
    });
};
onexecute = function (_a) {
    var objectName = _a.objectName, methodName = _a.methodName, parameters = _a.parameters, properties = _a.properties, configuration = _a.configuration;
    return __awaiter(this, void 0, void 0, function () {
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _b = objectName;
                    switch (_b) {
                        case "posts": return [3 /*break*/, 1];
                        case "comments": return [3 /*break*/, 3];
                        case "todos": return [3 /*break*/, 5];
                        case "users": return [3 /*break*/, 7];
                    }
                    return [3 /*break*/, 9];
                case 1: return [4 /*yield*/, onexecutePosts(methodName, parameters, properties, configuration)];
                case 2:
                    _c.sent();
                    return [3 /*break*/, 10];
                case 3: return [4 /*yield*/, onexecuteComments(methodName, parameters, properties, configuration)];
                case 4:
                    _c.sent();
                    return [3 /*break*/, 10];
                case 5: return [4 /*yield*/, onexecuteToDos(methodName, parameters, properties, configuration)];
                case 6:
                    _c.sent();
                    return [3 /*break*/, 10];
                case 7: return [4 /*yield*/, onexecuteUsers(methodName, parameters, properties, configuration)];
                case 8:
                    _c.sent();
                    return [3 /*break*/, 10];
                case 9: throw new Error("The object " + objectName + " is not supported.");
                case 10: return [2 /*return*/];
            }
        });
    });
};
function onexecutePosts(methodName, parameters, properties, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = methodName;
                    switch (_a) {
                        case "getList": return [3 /*break*/, 1];
                        case "getById": return [3 /*break*/, 3];
                        case "getByUserId": return [3 /*break*/, 5];
                        case "create": return [3 /*break*/, 7];
                        case "update": return [3 /*break*/, 9];
                        case "delete": return [3 /*break*/, 11];
                    }
                    return [3 /*break*/, 13];
                case 1: return [4 /*yield*/, onexecutePostsGetList(parameters, properties, configuration)];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 14];
                case 3: return [4 /*yield*/, onexecutePostsGetById(parameters, properties, configuration)];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 14];
                case 5: return [4 /*yield*/, onexecutePostsGetByUserId(parameters, properties, configuration)];
                case 6:
                    _b.sent();
                    return [3 /*break*/, 14];
                case 7: return [4 /*yield*/, onexecutePostsCreate(parameters, properties, configuration)];
                case 8:
                    _b.sent();
                    return [3 /*break*/, 14];
                case 9: return [4 /*yield*/, onexecutePostsUpdate(parameters, properties, configuration)];
                case 10:
                    _b.sent();
                    return [3 /*break*/, 14];
                case 11: return [4 /*yield*/, onexecutePostsDelete(parameters, properties, configuration)];
                case 12:
                    _b.sent();
                    return [3 /*break*/, 14];
                case 13: throw new Error("The method " + methodName + " is not supported.");
                case 14: return [2 /*return*/];
            }
        });
    });
}
function onexecuteComments(methodName, parameters, properties, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = methodName;
                    switch (_a) {
                        case "getList": return [3 /*break*/, 1];
                        case "getById": return [3 /*break*/, 3];
                        case "getByPostId": return [3 /*break*/, 5];
                    }
                    return [3 /*break*/, 7];
                case 1: return [4 /*yield*/, onexecuteCommentsGetList(parameters, properties, configuration)];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 8];
                case 3: return [4 /*yield*/, onexecuteCommentsGetById(parameters, properties, configuration)];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 8];
                case 5: return [4 /*yield*/, onexecuteCommentsGetByPostId(parameters, properties, configuration)];
                case 6:
                    _b.sent();
                    return [3 /*break*/, 8];
                case 7: throw new Error("The method " + methodName + " is not supported.");
                case 8: return [2 /*return*/];
            }
        });
    });
}
function onexecuteToDos(methodName, parameters, properties, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = methodName;
                    switch (_a) {
                        case "getList": return [3 /*break*/, 1];
                        case "getById": return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 5];
                case 1: return [4 /*yield*/, onexecuteToDosGetList(parameters, properties, configuration)];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 6];
                case 3: return [4 /*yield*/, onexecuteToDosGetById(parameters, properties, configuration)];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 6];
                case 5: throw new Error("The method " + methodName + " is not supported.");
                case 6: return [2 /*return*/];
            }
        });
    });
}
function onexecuteUsers(methodName, parameters, properties, configuration) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = methodName;
                    switch (_a) {
                        case "getList": return [3 /*break*/, 1];
                        case "getById": return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 5];
                case 1: return [4 /*yield*/, onexecuteUsersGetList(parameters, properties, configuration)];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 6];
                case 3: return [4 /*yield*/, onexecuteUsersGetById(parameters, properties, configuration)];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 6];
                case 5: throw new Error("The method " + methodName + " is not supported.");
                case 6: return [2 /*return*/];
            }
        });
    });
}
function onexecutePostsGetList(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"] + 'posts/';
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                //console.log(xhr.responseText);
                var obj = JSON.parse(xhr.responseText);
                postResult(obj.map(function (x) {
                    return {
                        "id": x.id,
                        "userId": x.userId,
                        "title": x.title,
                        "body": x.body
                    };
                }));
                resolve();
            }
            catch (e) {
                reject(e);
            }
        };
        xhr.open("GET", urlValue);
        xhr.send();
    });
}
function onexecutePostsGetById(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"] + 'posts/';
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult({
                    "id": obj.id,
                    "userId": obj.userId,
                    "title": obj.title,
                    "body": obj.body
                });
                resolve();
            }
            catch (e) {
                reject(e);
            }
        };
        if (typeof properties["id"] !== "number")
            throw new Error("properties[\"id\"] is not of type number");
        xhr.open("GET", urlValue + encodeURIComponent(properties["id"]));
        xhr.send();
    });
}
function onexecutePostsGetByUserId(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"] + 'posts?userId=';
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult(obj.map(function (x) {
                    return {
                        "id": x.id,
                        "userId": x.userId,
                        "title": x.title,
                        "body": x.body
                    };
                }));
                resolve();
            }
            catch (e) {
                reject(e);
            }
        };
        if (typeof properties["userId"] !== "number")
            throw new Error("properties[\"userId\"] is not of type number");
        xhr.open("GET", urlValue + encodeURIComponent(properties["userId"]));
        xhr.send();
    });
}
function onexecutePostsCreate(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"] + 'posts/';
        var data = JSON.stringify({
            "userId": properties["userId"],
            "title": properties["title"],
            "body": properties["body"]
        });
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                // look for 'created' code
                if (xhr.status !== 201)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult({
                    "id": obj.id,
                    "userId": obj.userId,
                    "title": obj.title,
                    "body": obj.body
                });
                resolve();
            }
            catch (e) {
                reject(e);
            }
        };
        xhr.open("POST", urlValue);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.send(data);
    });
}
function onexecutePostsUpdate(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"] + 'posts/';
        var data = JSON.stringify({
            "userId": properties["userId"],
            "title": properties["title"],
            "body": properties["body"]
        });
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult({
                    "id": obj.id,
                    "userId": obj.userId,
                    "title": obj.title,
                    "body": obj.body
                });
                resolve();
            }
            catch (e) {
                reject(e);
            }
        };
        if (typeof properties["id"] !== "number")
            throw new Error("properties[\"id\"] is not of type number");
        xhr.open("PUT", urlValue + encodeURIComponent(properties["id"]));
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.send(data);
    });
}
function onexecutePostsDelete(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"];
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                resolve();
            }
            catch (e) {
                reject(e);
            }
        };
        if (typeof properties["id"] !== "number")
            throw new Error("properties[\"id\"] is not of type number");
        xhr.open("DELETE", urlValue + 'posts/' + encodeURIComponent(properties["id"]));
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.send();
    });
}
function onexecuteCommentsGetList(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"] + 'comments';
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult(obj.map(function (x) {
                    return {
                        "id": x.id,
                        "postId": x.postId,
                        "name": x.name,
                        "email": x.email,
                        "body": x.body
                    };
                }));
                resolve();
            }
            catch (error) {
                reject(error);
            }
        };
        xhr.open("GET", urlValue);
        xhr.send();
    });
}
function onexecuteCommentsGetById(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"];
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult({
                    "id": obj.id,
                    "postId": obj.postId,
                    "name": obj.name,
                    "email": obj.email,
                    "body": obj.body
                });
                resolve();
            }
            catch (error) {
                reject(error);
            }
        };
        if (typeof properties["id"] !== "number")
            throw new Error("properties[\"id\"] is not of type number");
        xhr.open("GET", urlValue + 'comments/' + encodeURIComponent(properties["id"]));
        xhr.send();
    });
}
function onexecuteCommentsGetByPostId(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"];
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult(obj.map(function (x) {
                    return {
                        "id": x.id,
                        "postId": x.postId,
                        "name": x.name,
                        "email": x.email,
                        "body": x.body
                    };
                }));
                resolve();
            }
            catch (error) {
                reject(error);
            }
        };
        if (typeof properties["postId"] !== "number")
            throw new Error("properties[\"postId\"] is not of type number");
        xhr.open("GET", urlValue + 'comments?postId=' + encodeURIComponent(properties["postId"]));
        xhr.send();
    });
}
function onexecuteToDosGetList(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"];
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult(obj.map(function (x) {
                    return {
                        "id": x.id,
                        "userId": x.userId,
                        "title": x.title,
                        "completed": x.completed
                    };
                }));
                resolve();
            }
            catch (error) {
                reject(error);
            }
        };
        xhr.open("GET", urlValue + 'todos/');
        xhr.send();
    });
}
function onexecuteToDosGetById(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"];
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult({
                    "id": obj.id,
                    "userId": obj.userId,
                    "title": obj.title,
                    "completed": obj.completed
                });
                resolve();
            }
            catch (error) {
                reject(error);
            }
        };
        if (typeof properties["id"] !== "number")
            throw new Error("properties[\"id\"] is not of type number");
        xhr.open("GET", urlValue + 'todos/' + encodeURIComponent(properties["id"]));
        xhr.send();
    });
}
function onexecuteUsersGetList(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"];
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult(obj.map(function (x) {
                    return {
                        "id": x.id,
                        "name": x.name,
                        "username": x.username,
                        "email": x.email,
                        "addressStreet": x.address.street,
                        "addressSuite": x.address.suite,
                        "addressCity": x.address.city,
                        "addressGeoLat": x.address.geo.lat,
                        "addressGeoLng": x.address.geo.lng,
                        "phone": x.phone,
                        "website": x.website,
                        "companyName": x.company.name,
                        "companyCatchPhrase": x.company.catchPhrase,
                        "companyBs": x.company.bs
                    };
                }));
                resolve();
            }
            catch (error) {
                reject(error);
            }
        };
        xhr.open("GET", urlValue + 'users/');
        xhr.send();
    });
}
function onexecuteUsersGetById(parameters, properties, configuration) {
    return new Promise(function (resolve, reject) {
        var urlValue = configuration["ServiceURL"];
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            try {
                if (xhr.readyState !== 4)
                    return;
                if (xhr.status !== 200)
                    throw new Error("Failed with status " + xhr.status);
                var obj = JSON.parse(xhr.responseText);
                postResult({
                    "id": obj.id,
                    "name": obj.name,
                    "username": obj.username,
                    "email": obj.email,
                    "addressStreet": obj.address.street,
                    "addressSuite": obj.address.suite,
                    "addressCity": obj.address.city,
                    "addressGeoLat": obj.address.geo.lat,
                    "addressGeoLng": obj.address.geo.lng,
                    "phone": obj.phone,
                    "website": obj.website,
                    "companyName": obj.company.name,
                    "companyCatchPhrase": obj.company.catchPhrase,
                    "companyBs": obj.company.bs
                });
                resolve();
            }
            catch (error) {
                reject(error);
            }
        };
        if (typeof properties["id"] !== "number")
            throw new Error("properties[\"id\"] is not of type number");
        xhr.open("GET", urlValue + 'users/' + encodeURIComponent(properties["id"]));
        xhr.send();
    });
}
